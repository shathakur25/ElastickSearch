Use ansible role to create elasticsearch cluster node.
  Download the ansible-elasticsearch Playbook
  Elastic provides an Ansible role that can be used to easily set up an Elasticsearch cluster. To use it, we simply need to add it to our ansible-tinc playbook and define a few host groups and assign the appropriate roles to the groups.
  First, change to the directory that your Tinc Ansible Playbook is in:
    cd ~/ansible-tinc
  Then clone the ansible-elasticsearch role, which is available on Elastic's GitHub account, to the Playbook's roles directory:
    cd roles
    git clone https://github.com/elastic/ansible-elasticsearch
  Rename the role to "elasticsearch":
    mv ansible-elasticsearch elasticsearch
  Update site.yml

  Let's edit the master Playbook file, site.yml, to map three different Elasticsearch roles to three different Ansible host groups.
  
  This will allow us to create dedicated master, dedicated data, and master-eligible/data Elasticsearch nodes by simply adding
  hosts to the appropriate groups.

  Change back to the Ansible Playbook's directory:
  cd ~/ansible-playbook
  vi site.yml
  Map Elasticsearch Dedicated Master Role to Group
  At the bottom of the file, map the dedicated master elasticsearch role to the elasticsearch_master_nodes group by adding these lines:

       
          site.yml — Dedicated master nodes
          - hosts: elasticsearch_master_nodes
            roles:
              - { role: elasticsearch, es_instance_name: "node1", es_config: { discovery.zen.ping.unicast.hosts: "node01, node02, node03", network.host: "_tun0_, _local_", cluster.name: "production", discovery.zen.ping.multicast.enabled: false,  http.port: 9200, transport.tcp.port: 9300, node.data: false, node.master: true, bootstrap.mlockall: true } }
            vars:
              es_major_version: "2.x"
              es_version: "2.2.1"
              es_heap_size: "2g"
              es_cluster_name: "production"

  This role will create dedicated master nodes because it configures the nodes with these values: node.master: true and node.data: false

  In the example, we are using node01, node02, and node03 because those were the hostnames used in the prerequisite VPN tutorial. Also, if your VPN interface is named something other than "tun0", update the network.host variable accordingly.
  
  Update es_heap_size to a value that is roughly half of the free memory on your dedicated master servers. For example, if your server has about 4 GB free, set the heap size to "2g".
  Now any hosts that belong to the elasticsearch_master_nodes Ansible host group will be configured as dedicated master Elasticsearch nodes.

  Map Elasticsearch Master/Data Role to Group
  

            site.yml — Master-eligible/data nodes
            - hosts: elasticsearch_master_data_nodes
              roles:
                - { role: elasticsearch, es_instance_name: "node1", es_config: { discovery.zen.ping.unicast.hosts: "node01, node02, node03", network.host: "_tun0_, _local_", cluster.name: "production", discovery.zen.ping.multicast.enabled: false, http.port: 9200, transport.tcp.port: 9300, node.data: true, node.master: true, bootstrap.mlockall: true } }
              vars:
                es_major_version: "2.x"
                es_version: "2.2.1"
                es_heap_size: "2g"
                es_cluster_name: "production"
                
    This role will create data nodes that are master-eligible because it configures the nodes with these values: node.master: true and node.data: true.

  Be sure to update the highlighted hostnames in the discovery.zen.ping.unicast.hosts variable to match the Ansible inventory hostnames (or VPN IP addresses) of a few of your Elasticsearch servers. Also, if your VPN interface is named something other than "tun0", update the network.host variable accordingly.

  Set es_version to the same value that you used for the dedicated master role.

  Update es_heap_size to a value that is roughly half of the free memory on your  master-eligible/data servers.

  Now any hosts that belong to the elasticsearch_master_data_nodes Ansible host group will be configured as data nodes that are master-eligible.

  Map Elasticsearch Dedicated Data Role to Group

            site.yml — Dedicated data nodes
            - hosts: elasticsearch_data_nodes
              roles:
                - { role: elasticsearch, es_instance_name: "node1", es_config: { discovery.zen.ping.unicast.hosts: "node01, node02, node03", network.host: "_tun0_, _local_", cluster.name: "production", discovery.zen.ping.multicast.enabled: false, http.port: 9200, transport.tcp.port: 9300, node.data: true, node.master: false, bootstrap.mlockall: true } }
              vars:
                es_major_version: "2.x"
                es_version: "2.2.1"
                es_heap_size: "2g"
                es_cluster_name: "production"

  This role will create dedicated data nodes because it configures the nodes with these values: node.master: false and node.data: true.

  Set es_version to the same value that you used in the previous roles.

  Update es_heap_size to a value that is roughly half of the free memory on your dedicated data servers.

  Now any hosts that belong to the elasticsearch_data_nodes Ansible host group will be configured as dedicated data Elasticsearch nodes.

  Save and Exit
  
  Now that you've defined the three roles, and mapped them to host groups, you can save and exit site.yml.

  Feel free to add more Elasticsearch roles and host group mappings later.

  Update Host Inventory File
  Now that the new Elasticsearch roles have been mapped to host groups, you can create different types of Elasticsearch nodes by simply adding the hosts to the appropriate host groups.

  Edit the Ansible hosts inventory file:

  vi hosts
  If you followed the prerequisite tutorial, your file should look something like this (with your server hostnames and IP addresses):

    Ansible hosts inventory — Original file
    [vpn]
    node01 vpn_ip=10.0.0.1 ansible_host=45.55.41.106
    node02 vpn_ip=10.0.0.2 ansible_host=159.203.104.93
    node03 vpn_ip=10.0.0.3 ansible_host=159.203.104.127
    node04 vpn_ip=10.0.0.4 ansible_host=159.203.104.129

    [removevpn]
    Now add three groups that correspond to the mappings that we defined in site.yml.

    Ansible hosts inventory — Elasticsearch groups
    [elasticsearch_master_nodes]

    [elasticsearch_master_data_nodes]

    [elasticsearch_data_nodes]

  Now distribute your Elasticsearch hosts among the new host groups, depending on the types of Elasticsearch nodes that you want your cluster to consist of. For example, if you want three dedicated master nodes and a single dedicated data node, your inventory file would look something like this:

  Ansible hosts inventory — Complete example
  [vpn]
  node01 vpn_ip=10.0.0.1 ansible_host=45.55.41.106
  node02 vpn_ip=10.0.0.2 ansible_host=159.203.104.93
  node03 vpn_ip=10.0.0.3 ansible_host=159.203.104.127
  node04 vpn_ip=10.0.0.4 ansible_host=159.203.104.129

  [removevpn]

  [elasticsearch_master_nodes]
  node01
  node02
  node03

  [elasticsearch_master_data_nodes]

  [elasticsearch_data_nodes]
  node04
  Note: Each Elasticsearch node must also be defined in the [vpn] host group so that all nodes can communicate with each other over the VPN. Also, any server that needs to connect to the Elasticsearch cluster must also be defined in the [vpn] host group.

  Once your inventory file reflects your desired Elasticsearch (and VPN) setup, save and exit.

  Create Elasticsearch Cluster
  Now that site.yml and hosts are set up, you are ready to create your Elasticsearch cluster by running the Playbook.

  Run the Playbook with this command:

  ansible-playbook site.yml
